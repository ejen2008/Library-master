@using Library.ViewModels.AuthorViewModels
@using Library.Domain.Entities
@model IEnumerable<AuthorGetViewModel>
@{
    ViewBag.Title = "List of Authors";
}

@Html.ActionLink(" Add new author", "Create", new { }, new { @class = "btn btn-success glyphicon glyphicon-plus-sign" })

@(Html.Kendo().Grid(Model)
      .Name("Grid")
      .Columns(columns =>
      {
      columns.Template(@<text>@item.Author.FirstName  @item.Author.LastName</text>)
                .ClientTemplate("#=FirstName# #=LastName#")
                .Title("Name").Width(200);
      columns.Bound(c => c.Author.BirthDate).Format("{0:dd/MM/yyyy}").Width(110);
      columns.Bound(c => c.Author.DaiedDate).Format("{0:dd/MM/yyyy}").Width(110);
      columns.Template(@<text>
        @{
            foreach (var b in item.Books)
            {
                if (b != null)
                {
                @b.NameBook <br />
                }
            }
            }
               </text>).ClientTemplate("#=Books#").Title("Books");
      columns.Template(@<text>
              @Html.ActionLink(" ", "Edit", new { id = item.Author.Id }, new { @class = "btn k-primary glyphicon glyphicon-pencil" })
              </text>).Width(75);
      columns.Template(@<text>
              @Html.ActionLink(" ", "Delete", new { id = item.Author.Id }, new { @class = "btn btn-danger glyphicon glyphicon-trash" })
              </text>).Width(75);
      })
      .Editable(editable => editable.Mode(GridEditMode.PopUp))

      .HtmlAttributes(new { style = "height: 650px;" })
      .Pageable()
      .Sortable(sortable =>
      {
          sortable.SortMode(GridSortMode.SingleColumn);
      })
      .Scrollable()
      .DataSource(dataSource => dataSource
        .Server()
        .PageSize(20)
        .Model(model => model.Id(p => p.Author.Id))
        .Read(read => read.Action("Index", "Author"))
      )
)